File: Utils.ts

import { Stack } from "aws-cdk-lib";
import * as crypto from 'crypto';

export function getSuffixFromStack(stack: Stack): string {
    const stackName = stack.stackName;
    const hash = crypto.createHash('sha256').update(stackName).digest('hex');
    return hash.slice(0, 8); // Use the first 8 characters of the hash as the suffix
}

File: compute-stack.ts

import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as rds from 'aws-cdk-lib/aws-rds';
import * as secretsmanager from 'aws-cdk-lib/aws-secretsmanager';

interface ComputeStackProps extends cdk.StackProps {
    vpc: ec2.Vpc; // VPC existente
    dbCluster: rds.ServerlessCluster; // Clúster de Aurora Serverless
    dbCredentialsSecret: secretsmanager.Secret; // Secreto de la DB
}

export class ComputeStack extends cdk.Stack {
    constructor(scope: Construct, id: string, props: ComputeStackProps) {
        super(scope, id, props);

        // 1. Grupo de Seguridad para la instancia EC2
        const instanceSecurityGroup = new ec2.SecurityGroup(this, 'InstanceSecurityGroup', {
            vpc: props.vpc,
            description: 'Permitir acceso HTTP a Metabase',
            allowAllOutbound: true,
        });

        instanceSecurityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(3000), 'Permitir acceso HTTP a Metabase');

        // 2. Rol IAM para la instancia EC2
        const instanceRole = new iam.Role(this, 'InstanceRole', {
            assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),
            managedPolicies: [
                iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonEC2ContainerServiceforEC2Role'),
                iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonSSMManagedInstanceCore'), // Acceso a SSM
            ],
        });

        // 3. Launch Template para la instancia Spot
        const launchTemplate = new ec2.CfnLaunchTemplate(this, 'MetabaseLaunchTemplate', {
            launchTemplateData: {
                instanceType: 't4g.medium',
                imageId: new ec2.AmazonLinuxImage({
                    generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,
                    cpuType: ec2.AmazonLinuxCpuType.ARM_64,
                }).getImage(this).imageId,
                keyName: 'diego-mac-keys', // Par de claves SSH
                iamInstanceProfile: {
                    name: new iam.CfnInstanceProfile(this, 'InstanceProfile', {
                        roles: [instanceRole.roleName],
                    }).ref,
                },
                securityGroupIds: [instanceSecurityGroup.securityGroupId],
                instanceMarketOptions: {
                    marketType: 'spot',
                    spotOptions: {
                        maxPrice: '0.015', // Precio máximo para Spot Instances
                    },
                },
            },
        });

        // 4. Crear la instancia EC2 Spot a partir del Launch Template
        const spotInstance = new ec2.CfnInstance(this, 'MetabaseSpotInstance', {
            launchTemplate: {
                launchTemplateId: launchTemplate.ref,
                version: launchTemplate.attrLatestVersionNumber,
            },
        });

        // 5. Permitir conexiones a Aurora Serverless desde la instancia EC2
        props.dbCluster.connections.allowDefaultPortFrom(
            ec2.Peer.ipv4(spotInstance.attrPublicIp), 'Permitir acceso a Aurora desde la instancia Spot'
        );

        // 6. Salida con la IP pública de la instancia Spot
        new cdk.CfnOutput(this, 'InstancePublicIP', {
            value: spotInstance.attrPublicIp,
            description: 'Dirección IP pública de la instancia Spot',
        });
    }
}


File: data-stack.ts

import * as cdk from "aws-cdk-lib";
import { Construct } from "constructs";
import * as rds from "aws-cdk-lib/aws-rds";
import * as ec2 from "aws-cdk-lib/aws-ec2";
import * as secretsmanager from "aws-cdk-lib/aws-secretsmanager";

interface DataStackProps extends cdk.StackProps {
    vpc: ec2.Vpc;
}

export class DataStack extends cdk.Stack {
    public readonly dbCluster: rds.ServerlessCluster;
    public readonly dbCredentialsSecret: secretsmanager.Secret;

    constructor(scope: Construct, id: string, props: DataStackProps) {
        super(scope, id, props);

        // Crear un secreto para las credenciales de la base de datos
        this.dbCredentialsSecret = new secretsmanager.Secret(
            this,
            "DBCredentialsSecret",
            {
                secretName: "AuroraDBCredentials",
                generateSecretString: {
                    secretStringTemplate: JSON.stringify({ username: "metabase" }),
                    generateStringKey: "password",
                    excludeCharacters: '"@/\\',
                },
                removalPolicy: cdk.RemovalPolicy.DESTROY,
            },
            
        );

        // Crear la base de datos Aurora Serverless
        this.dbCluster = new rds.ServerlessCluster(
            this,
            "AuroraServerlessCluster",
            {
                engine: rds.DatabaseClusterEngine.auroraPostgres({
                    version: rds.AuroraPostgresEngineVersion.VER_17_2,
                }),
                vpc: props.vpc,
                credentials: rds.Credentials.fromSecret(this.dbCredentialsSecret),
                defaultDatabaseName: "metabase",
                scaling: {
                    autoPause: cdk.Duration.minutes(10),
                    minCapacity: rds.AuroraCapacityUnit.ACU_1,
                    maxCapacity: rds.AuroraCapacityUnit.ACU_1,
                },
                removalPolicy: cdk.RemovalPolicy.DESTROY,
            }
        );
    }
}


File: metabase-on-aws-stack.ts

import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { NetworkingStack } from './networking-stack';
import { DataStack } from './data-stack';
import { ComputeStack } from './compute-stack';

export class MetabaseOnAwsStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // 1. Crear la pila de red (VPC y subredes)
    const networkingStack = new NetworkingStack(this, 'NetworkingStack');

    // 2. Crear la pila de datos (Aurora Serverless)
    const dataStack = new DataStack(this, 'DataStack', {
      vpc: networkingStack.vpc, // Pasar la VPC de NetworkingStack
    });

    // 3. Crear la pila de cómputo (EC2 Spot para Metabase)
    new ComputeStack(this, 'ComputeStack', {
      vpc: networkingStack.vpc,                 // Pasar la VPC de NetworkingStack
      dbCluster: dataStack.dbCluster,           // Pasar el cluster de Aurora
      dbCredentialsSecret: dataStack.dbCredentialsSecret, // Pasar el secreto de la DB
    });
  }
}


File: networking-stack.ts

import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as ec2 from 'aws-cdk-lib/aws-ec2';

export class NetworkingStack extends cdk.Stack {
    public readonly vpc: ec2.Vpc;

    constructor(scope: Construct, id: string, props?: cdk.StackProps) {
        super(scope, id, props);

        // Crear una VPC con 2 zonas de disponibilidad
        this.vpc = new ec2.Vpc(this, 'MetabaseVpc', {
            maxAzs: 2,
        });
    }
}


